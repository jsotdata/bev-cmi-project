function BatteryHV_loadSimulationCase_Random(nvpairs)
%% Sets up simulation
% This function sets up the followings:
% - Simulation stop time
% - Input signals
% - Initial conditions
%
% Model must be loaded for this function to work.

% Copyright 2023 The MathWorks, Inc.

arguments
  nvpairs.RandomSeed (1,1) {mustBePositive} = 123
  nvpairs.NumTransitions (1,1) {mustBePositive} = 10
  nvpairs.InitialSOC_pct (1,1) {mustBeInRange(nvpairs.InitialSOC_pct, 0, 100)} = 60
end

deltaInterp = 0.5;

sig = SignalDesignUtility.buildTrace( ...
  RandomSeed = nvpairs.RandomSeed, ...
  InterpolationStepSize = deltaInterp, ...
  XInitialFlatLength = 5, ... Initial duration for constant current
  YInitialValue = 0, ... Initial value of current
  NumTransitions  = nvpairs.NumTransitions, ...
  TransitionRange = [10 30], ... Time range of transition from one constant segment to the next
  FlatRange = [60 120], ... Time range of constant segment
  YRange = [-10 30], ... Value range of current
  XFinalTransitionLength = 10, ... Duration of final transition
  XFinalFlatLength = 10, ... Duration of final constant current segment
  YFinalValue = 0 );  % Final current value

% Uncomment below and run this function to see the plot of data points and generated signal trace.
%{
plotDataPoints(sig);
%}

t_end = sig.Data.X(end);

BatteryHV_loadSimulationCase( ...
  CaseName = "Random input", ...
  ModelName = "BatteryHV_harness_model", ...
  StopTime = t_end, ...
  InputSystemPath = "/Inputs", ...
  LoadCurrentBlockName = "Load current", ...
  LoadCurrentDataPoints = sig.XYData, ...
  LoadCurrentDeltaT = deltaInterp, ...
  HeatFlowBlockName = "Heat flow", ...
  HeatFlowDataPoints = [0 1 0], ...
  HeatFlowDeltaT = 0.1, ...
  TerminalVoltage_V = evalin("base", "batteryHV.nominalVoltage_V"), ...
  NominalCapacity_kWh = evalin("base", "batteryHV.nominalCapacity_kWh"), ...
  InitialSOC_pct = nvpairs.InitialSOC_pct, ...
  InitialBatteryTemperature_K = 273.15 + 20, ...
  DisplayMessage = true );

end  % function
